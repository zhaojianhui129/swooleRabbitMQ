<?php
//初始化文件
define('DEBUG', 'on');
define('DS', DIRECTORY_SEPARATOR);
define('WEBPATH', __DIR__ . DS . '..');
define('APPSPATH', WEBPATH .'/queue');

//使用composer扩展
require_once WEBPATH . '/vendor/autoload.php';
//载入swoole frameworkZ框架配置
require_once WEBPATH . '/vendor/matyhtf/swoole_framework/libs/lib_config.php';

//Swoole::$php->setAppPath(WEBPATH . '/queue/');
//设置调试模式
Swoole\Config::$debug = true;

class QueueServer extends \Swoole\Protocol\Base
{
    const MAX_REQUEST = 10000;//每个子进程while循环里面最多循环次数，防止内存泄露
    protected $queueDriver;
    protected $queueData;
    public function __construct($queueDriver)
    {
        $this->queueDriver = $queueDriver;
    }

    public function onStart($server)
    {
        $this->runTask();
        parent::onStart($server); // TODO: Change the autogenerated stub
    }

    /**
     * 执行队列
     */
    public function runTask()
    {
        //循环次数
        $this->queueData = $this->queueDriver->pop();
        if ($this->queueData){
            try {
                $this->checkQueueData($this->queueData);
                Swoole::$php->router([$this, 'router']);
                Swoole::$php->request = $this->queueData['recData'];
                Swoole::$php->runMVC();
            } catch (Exception $e) {
                $this->log($e->getCode().':'.$e->getMessage());
            }

        }
    }

    /**
     * 检查队列数据
     * @param $queueData
     * @return bool
     */
    protected function checkQueueData($queueData)
    {
        return true;
    }

    /**
     * 路由
     * @return array
     */
    public function router()
    {
        if (isset($this->queueData['queueName']) && strpos('/', $this->queueData['queueName'])!== false){
            $urlParam = explode('/', $this->queueData['queueName']);
            return ['controller' => $urlParam[0], 'view' => $urlParam[1]];
        }else{
            return ['controller' => 'Home', 'view'=>'index'];
        }
    }
    /**
     * 接收数据
     * @param $server
     * @param $client_id
     * @param $from_id
     * @param $data
     */
    public function onReceive($server, $client_id, $from_id, $data)
    {
        $receiveData = json_decode($data, true);
        try {
            $this->checkQueueData($receiveData);
            $this->server->finish(['code' => 1000, 'msg'=>'操作成功']);
        } catch (\Exception $e) {
            $this->server->finish(['code'=>$e->getCode(),'msg'=>$e->getMessage()]);
        }
    }

}
//设置PID文件的存储路径
Swoole\Network\Server::setPidFile(WEBPATH . '/server/pid/queueServer.pid');
Swoole\Error::$echo_html = false;
Swoole\Network\Server::addOption('q|queue?', '队列名称');
/**
 * 显示Usage界面
 * php queueServer.php start|stop|reload
 */
Swoole\Network\Server::start(function ($options) {
    $queueName = isset($options) && $options['queue'] ? $options['queue'] : 'queue';
    $queueDriver = new Swoole\Queue([
        'host'    => "172.17.0.3",
        'port'    => 6379,
        'password' => '',
        'timeout' => 0.25,
        'pconnect' => false,
        'key' => 'swoole:'.$queueName,
    ], 'Swoole\Queue\Redis');
    $AppSvr = new QueueServer($queueDriver);
    $AppSvr->setLogger(new \Swoole\Log\EchoLog(true));
    $server = Swoole\Network\Server::autoCreate('0.0.0.0', 9443);
    $server->setProtocol($AppSvr);
    $server->run([
        'worker_num' => 10,
        'max_request' => 1,
        'ipc_mode' => 2,
    ]);
});