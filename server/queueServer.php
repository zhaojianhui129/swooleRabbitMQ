<?php
//载入初始化文件
require_once __DIR__ . '/initServer.php';
//设置调试模式
Swoole\Config::$debug = true;

class QueueServer extends \Swoole\Protocol\Base
{
    const MAX_REQUEST = 10000;//每个子进程while循环里面最多循环次数，防止内存泄露
    protected $queueDriver;
    public function __construct(\Swoole\Queue\Redis $queueDriver)
    {
        $this->queueDriver = $queueDriver;
    }

    public function onStart($server)
    {

        $this->runTask();
        parent::onStart($server); // TODO: Change the autogenerated stub
    }

    public function runTask()
    {
        //循环次数
        $queueData = $this->queueDriver->pop();
        try {
            $this->checkQueueData($queueData);
            $urlParam = explode('/', $queueData['queueName']);
            Swoole::$php->router(['controller' => $urlParam[0], 'view' => $urlParam[1]]);
            Swoole::$php->request = $queueData['recData'];
            Swoole::$php->runMVC();
        } catch (Exception $e) {
            $this->log($e->getCode().':'.$e->getMessage());
        }
    }

    protected function checkQueueData($queueData)
    {
        return true;
    }
    /**
     * 接收数据
     * @param $server
     * @param $client_id
     * @param $from_id
     * @param $data
     */
    public function onReceive($server, $client_id, $from_id, $data)
    {
        $receiveData = json_decode($data, true);
        try {
            $this->checkQueueData($receiveData);
            $this->server->finish(['code' => 1000, 'msg'=>'操作成功']);
        } catch (\Exception $e) {
            $this->server->finish(['code'=>$e->getCode(),'msg'=>$e->getMessage()]);
        }
    }
    public function task($task, $dstWorkerId = -1, $callback = null)
    {
        parent::task($task, $dstWorkerId, $callback); // TODO: Change the autogenerated stub
    }
}
//设置PID文件的存储路径
Swoole\Network\Server::setPidFile(WEBPATH . '/server/pid/queueServer.pid');
Swoole\Error::$echo_html = false;
Swoole\Network\Server::addOption('q|queue?', '队列名称');

/**
 * 显示Usage界面
 * php queueServer.php start|stop|reload
 */
Swoole\Network\Server::start(function () {
    $queueObj = Swoole\Network\Server::$optionKit->get('queue');
    $queueName = isset($queueObj->value) && $queueObj->value ? $queueObj->value : 'queue';
    $queueDriver = new \Swoole\Queue\Redis([
        'host'    => "172.17.0.3",
        'port'    => 6379,
        'password' => '',
        'timeout' => 0.25,
        'pconnect' => false,
        'key' => 'swoole:'.$queueName,
    ]);
    $AppSvr = new QueueServer($queueDriver);
    $AppSvr->setLogger(new \Swoole\Log\EchoLog(true));
    $server = Swoole\Network\Server::autoCreate('0.0.0.0', 9443);
    $server->setProtocol($AppSvr);
    $server->run([
        'worker_num' => 10,
        'max_request' => 1,
        'ipc_mode' => 2,
    ]);
});